import { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Filter, Search, Grid, List, Download, Share2 } from 'lucide-react';
import { EnhancedCareerRecommendationCard } from './EnhancedCareerRecommendationCard';

interface EnhancedCareerRecommendation {
  title: string;
  description: string;
  category: string;
  confidencePercent?: number;
  matchScore?: number;
  salaryRange?: string;
  skills?: string[];
  nextSteps?: string[];
  growthPotential?: 'high' | 'medium' | 'low';
  workEnvironment?: string;
  education?: string;
  why?: string;
  resources?: string[];
}

interface EnhancedCareerRecommendationListProps {
  recommendations: EnhancedCareerRecommendation[];
  loading?: boolean;
  onSaveCareer?: (career: string) => void;
  savedCareers?: string[];
}

const EnhancedCareerRecommendationList: React.FC<EnhancedCareerRecommendationListProps> = ({
  recommendations,
  loading = false,
  onSaveCareer,
  savedCareers = []
}) => {
  const [filteredRecommendations, setFilteredRecommendations] = useState(recommendations);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [sortBy, setSortBy] = useState<'match' | 'salary' | 'growth' | 'name'>('match');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [showFilters, setShowFilters] = useState(false);

  // Get unique categories
  const categories = ['all', ...Array.from(new Set(recommendations.map(r => r.category)))];

  // Filter and sort recommendations
  useEffect(() => {
    let filtered = recommendations;

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(rec =>
        rec.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        rec.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        rec.skills?.some(skill => skill.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    // Category filter
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(rec => rec.category === selectedCategory);
    }

    // Sort
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'match':
          return (b.matchScore || 0) - (a.matchScore || 0);
        case 'salary':
          // Simple salary comparison (could be improved with proper parsing)
          const aSalary = extractSalaryNumber(a.salaryRange || '');
          const bSalary = extractSalaryNumber(b.salaryRange || '');
          return bSalary - aSalary;
        case 'growth':
          const growthOrder = { high: 3, medium: 2, low: 1 };
          return (growthOrder[b.growthPotential || 'medium'] || 2) - (growthOrder[a.growthPotential || 'medium'] || 2);
        case 'name':
          return a.title.localeCompare(b.title);
        default:
          return 0;
      }
    });

    setFilteredRecommendations(filtered);
  }, [recommendations, searchTerm, selectedCategory, sortBy]);

  const extractSalaryNumber = (salaryRange: string): number => {
    const numbers = salaryRange.match(/\d+/g);
    if (numbers && numbers.length > 0) {
      return parseInt(numbers[0]);
    }
    return 0;
  };

  const handleExport = useCallback(() => {
    const csvContent = "data:text/csv;charset=utf-8," + 
      "Title,Category,Match Score,Salary Range,Growth Potential,Skills\n" +
      filteredRecommendations.map(rec => 
        `"${rec.title}","${rec.category}","${rec.matchScore || 0}%","${rec.salaryRange || 'N/A'}","${rec.growthPotential || 'N/A'}","${rec.skills?.join('; ') || 'N/A'}"`
      ).join("\n");

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "career_recommendations.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }, [filteredRecommendations]);

  const handleShare = useCallback(async () => {
    const shareText = `Check out my personalized career recommendations:\n\n${
      filteredRecommendations.slice(0, 3).map(rec => 
        `${rec.title} (${rec.matchScore}% match)`
      ).join('\n')
    }\n\nGenerated by Kickstart Career Guidance Platform`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Career Recommendations',
          text: shareText,
        });
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(shareText);
      alert('Career recommendations copied to clipboard!');
    }
  }, [filteredRecommendations]);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Generating personalized career recommendations...</p>
        </div>
      </div>
    );
  }

  if (recommendations.length === 0) {
    return (
      <div className="text-center py-12 bg-white dark:bg-gray-900 rounded-xl shadow-lg">
        <p className="text-gray-600 dark:text-gray-400 mb-4">No career recommendations available yet.</p>
        <p className="text-sm text-gray-500 dark:text-gray-500">Complete your personality profile and preferences to get personalized recommendations.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">      {/* Header */}
      <div className="bg-white dark:bg-gray-900 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div className="flex-1">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
              Your Career Recommendations
            </h2>
            <p className="text-gray-600 dark:text-gray-400">
              Found {filteredRecommendations.length} career{filteredRecommendations.length !== 1 ? 's' : ''} that match your profile
            </p>
          </div>

          <div className="flex flex-wrap items-center gap-3">
            <button
              onClick={handleExport}
              className="flex items-center gap-2 px-4 py-2 text-sm font-medium bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            >
              <Download className="h-4 w-4" />
              <span className="hidden sm:inline">Export</span>
            </button>
            
            <button
              onClick={handleShare}
              className="flex items-center gap-2 px-4 py-2 text-sm font-medium bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            >
              <Share2 className="h-4 w-4" />
              <span className="hidden sm:inline">Share</span>
            </button>

            <button
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center gap-2 px-4 py-2 text-sm font-medium bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 rounded-lg hover:bg-indigo-200 dark:hover:bg-indigo-900/50 transition-colors"
            >
              <Filter className="h-4 w-4" />
              <span>Filters</span>
            </button>
          </div>
        </div>        {/* Filters */}
        <AnimatePresence>
          {showFilters && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {/* Search */}
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search careers..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                  />
                </div>

                {/* Category */}
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                >
                  {categories.map(cat => (
                    <option key={cat} value={cat}>
                      {cat === 'all' ? 'All Categories' : cat}
                    </option>
                  ))}
                </select>

                {/* Sort */}
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value as any)}
                  className="px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                >
                  <option value="match">Sort by Match</option>
                  <option value="salary">Sort by Salary</option>
                  <option value="growth">Sort by Growth</option>
                  <option value="name">Sort by Name</option>
                </select>

                {/* View Mode */}
                <div className="flex items-center gap-1 p-1 bg-gray-100 dark:bg-gray-800 rounded-lg">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`flex items-center justify-center gap-2 px-3 py-2 rounded-md transition-all flex-1 ${
                      viewMode === 'grid'
                        ? 'bg-white dark:bg-gray-700 text-indigo-600 dark:text-indigo-400 shadow-sm'
                        : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
                    }`}
                  >
                    <Grid className="h-4 w-4" />
                    <span className="text-sm font-medium">Grid</span>
                  </button>
                  <button
                    onClick={() => setViewMode('list')}
                    className={`flex items-center justify-center gap-2 px-3 py-2 rounded-md transition-all flex-1 ${
                      viewMode === 'list'
                        ? 'bg-white dark:bg-gray-700 text-indigo-600 dark:text-indigo-400 shadow-sm'
                        : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
                    }`}
                  >
                    <List className="h-4 w-4" />
                    <span className="text-sm font-medium">List</span>
                  </button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>      {/* Career Cards */}
      <div className={`${
        viewMode === 'grid' 
          ? 'grid gap-6 lg:grid-cols-2 xl:grid-cols-1' 
          : 'space-y-6'
      }`}>
        <AnimatePresence>
          {filteredRecommendations.map((recommendation, index) => (
            <motion.div
              key={`${recommendation.title}-${index}`}
              layout
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3, delay: index * 0.05 }}
            >
              <EnhancedCareerRecommendationCard
                title={recommendation.title}
                description={recommendation.description}
                category={recommendation.category}
                confidencePercent={recommendation.confidencePercent}
                matchScore={recommendation.matchScore}
                salaryRange={recommendation.salaryRange}
                skills={recommendation.skills}
                nextSteps={recommendation.nextSteps}
                growthPotential={recommendation.growthPotential}
                workEnvironment={recommendation.workEnvironment}
                education={recommendation.education}
                why={recommendation.why}
                resources={recommendation.resources}
                onSave={onSaveCareer}
                isSaved={savedCareers.includes(recommendation.title)}
              />
            </motion.div>
          ))}
        </AnimatePresence>
      </div>

      {filteredRecommendations.length === 0 && recommendations.length > 0 && (
        <div className="text-center py-12 bg-white dark:bg-gray-900 rounded-xl shadow-lg">
          <p className="text-gray-600 dark:text-gray-400 mb-4">No careers match your current filters.</p>
          <button
            onClick={() => {
              setSearchTerm('');
              setSelectedCategory('all');
            }}
            className="px-4 py-2 bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400 rounded-lg hover:bg-indigo-200 dark:hover:bg-indigo-900/50 transition-colors"
          >
            Clear Filters
          </button>
        </div>
      )}
    </div>
  );
};

export default EnhancedCareerRecommendationList;
